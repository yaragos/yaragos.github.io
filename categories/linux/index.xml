<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Yaragos's Site</title><link>https://yaragos.top/categories/linux/</link><description>Recent content in Linux on Yaragos's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Yaragos</copyright><atom:link href="https://yaragos.top/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>我的配置 | 解锁 Linux 终端的最佳体验</title><link>https://yaragos.top/p/unlock-best-experience-of-linux-terminal/</link><pubDate>Tue, 09 Jul 2024 21:23:23 +0800</pubDate><guid>https://yaragos.top/p/unlock-best-experience-of-linux-terminal/</guid><description>&lt;img src="https://yaragos.top/p/unlock-best-experience-of-linux-terminal/cover.jpg" alt="Featured image of post 我的配置 | 解锁 Linux 终端的最佳体验" />&lt;blockquote>
&lt;p>之前是一直用默认的终端模拟器，命令提示符的主题是 &lt;code>oh-my-zsh&lt;/code> 的 &lt;code>ys&lt;/code>，当然，并没有使用 &lt;code>oh-my-zsh&lt;/code> 这个框架，因为太慢了，如果我的终端打开超过 0.5s 我就接受不了，所以用的是 &lt;code>zinit&lt;/code> ，我之前&lt;a class="link" href="https://yaragos.top/p/zsh-plugin-manager-from-zplug-to-zinit/" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲了这个插件管理器。&lt;/p>
&lt;/blockquote>
&lt;h2 id="终端模拟器">终端模拟器
&lt;/h2>&lt;h3 id="wezterm">wezterm
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/yaragos/dotfiles/blob/main/.wezterm.lua" target="_blank" rel="noopener"
>我的 wezterm 配置&lt;/a>&lt;/p>
&lt;p>使用 lua 作为配置语言，在 Github 搜关键词 &lt;code>wezterm config&lt;/code> 能看到 star 数最高的配置，那位大佬实现了彩色标签页，顶栏显示时间，随机背景图等功能，我不需要那么花哨，直接一个 &lt;code>.wezterm.lua&lt;/code> 就搞定了。&lt;/p>
&lt;p>当然功能还是比较简单的，只设置了一些常用的快捷键。wezterm 的内存占用还是挺高的，有一百多MB，当然启动速度还是挺快的，我默认终端是 &lt;code>kitty&lt;/code>，更轻更快,内存占用 50MB 左右。&lt;/p>
&lt;h3 id="kitty">kitty
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/yaragos/dotfiles/tree/main/.config/kitty" target="_blank" rel="noopener"
>我的 kitty 配置&lt;/a>&lt;/p>
&lt;p>当然，我的 kitty 目前功能还是挺简陋的，kitty 似乎无法用鼠标拖动滚动条，所以每次通过鼠标滚轮或者快捷键翻页都挺慢的，之后有时间打算添加搜索的快捷键，方便我定位上面的文本，省的有时候找上面的输出要翻半天。&lt;/p>
&lt;p>kitty 是不支持 fcitx 输入法的中文输入的，&lt;a class="link" href="https://github.com/kovidgoyal/kitty/issues/469" target="_blank" rel="noopener"
>这篇 issue 中提到了。&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在 /etc/profile 中添加&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GLFW_IM_MODULE&lt;/span>&lt;span class="o">=&lt;/span>ibus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或在 ~/.profile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GLFW_IM_MODULE&lt;/span>&lt;span class="o">=&lt;/span>ibus
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="命令提示符--cmd-prompt">命令提示符 | cmd-prompt
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/yaragos/dotfiles/blob/main/.config/starship.toml" target="_blank" rel="noopener"
>我的 starship 配置&lt;/a>&lt;/p>
&lt;p>我挺喜欢 oh-my-zsh 的 ys 主题的，一直使用的这个，无论是之前用 zplug 还是现在用 zinit,我都使用的 ys 主题，但 ys 主题依赖了一些 oh-my-zsh 的 plugin 和 lib, 为了精简我的 zsh 配置，我使用 starship 仿了个ys 主题，效果比原先的 ys 更好。&lt;/p>
&lt;p>我的 starship 配置是需要有 NerdFont 字体支持的。&lt;/p>
&lt;h2 id="终端字体">终端字体
&lt;/h2>&lt;p>终端字体当然是 nerd font 了，我的 nvim 和 starship 都需要 nerd font 字体。&lt;br>
我使用的是这两款：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/cascadia-code" target="_blank" rel="noopener"
>Cascadia Code | Github&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/JetBrains/JetBrainsMono" target="_blank" rel="noopener"
>JetBrains Mono | Github&lt;/a>&lt;/p>
&lt;h2 id="zsh-体验优化">zsh 体验优化
&lt;/h2>&lt;h3 id="补全和自动建议历史命令搜索">补全和自动建议，历史命令搜索
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/junegunn/fzf" target="_blank" rel="noopener"
>fzf&lt;/a> + &lt;a class="link" href="https://github.com/Aloxaf/fzf-tab" target="_blank" rel="noopener"
>fzf-tab&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>t&lt;/kbd> 搜索文件路径，&lt;br>
&lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>r&lt;/kbd> 搜索历史命令，&lt;br>
&lt;kbd>Tab&lt;/kbd> 键补全命令参数或路径（这个好用）。&lt;/p>
&lt;h3 id="vi-mode">vi mode
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/jeffreytse/zsh-vi-mode" target="_blank" rel="noopener"
>zsh-vi-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>zsh 默认是有 vi mode 的，但默认的功能更简陋。而且这个插件虽然叫 vi mode，但不仅支持 vi 模式 ，还支持 emacs 模式。&lt;br>
需要注意这个插件和 fzf 有冲突，需要像下面这样解决：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jeffreytse/zsh-vi-mode/issues/4" target="_blank" rel="noopener"
>相关 issue&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># zsh-vi-mode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> zvm_config&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ZVM_LINE_INIT_MODE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$ZVM_MODE_INSERT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ZVM_VI_INSERT_ESCAPE_BINDKEY&lt;/span>&lt;span class="o">=&lt;/span>jk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> zvm_after_init&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bindkey -M vicmd &lt;span class="s2">&amp;#34;H&amp;#34;&lt;/span> vi-first-non-blank
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bindkey -M vicmd &lt;span class="s2">&amp;#34;L&amp;#34;&lt;/span> vi-end-of-line
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bindkey &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span> magic-space &lt;span class="c1"># [Space] - don&amp;#39;t do history expansion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bindkey &lt;span class="s2">&amp;#34;\C-j&amp;#34;&lt;/span> copy-prev-shell-word &lt;span class="c1"># file rename magick, use &amp;lt;C-m&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">source&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>fzf --zsh&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit ice &lt;span class="nv">depth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit light jeffreytse/zsh-vi-mode
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="结语">结语
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/yaragos/dotfiles/blob/main/.zshrc" target="_blank" rel="noopener"
>我的 zsh 配置&lt;/a>&lt;/p>
&lt;p>我的其他配置比如 vim 和 nvim 都在 &lt;a class="link" href="https://github.com/yaragos/dotfiles" target="_blank" rel="noopener"
>dotfiles&lt;/a> 仓库里。&lt;/p></description></item><item><title>zsh插件管理器：从zplug转到zinit</title><link>https://yaragos.top/p/zsh-plugin-manager-from-zplug-to-zinit/</link><pubDate>Thu, 01 Feb 2024 18:09:12 +0800</pubDate><guid>https://yaragos.top/p/zsh-plugin-manager-from-zplug-to-zinit/</guid><description>&lt;img src="https://yaragos.top/p/zsh-plugin-manager-from-zplug-to-zinit/cover.jpg" alt="Featured image of post zsh插件管理器：从zplug转到zinit" />&lt;blockquote>
&lt;p>好久之前就使用的是zplug管理zsh插件，为了追求速度，打算使用zinit。&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置
&lt;/h2>&lt;p>我在zinit中多配置了一些插件，配置语法我目前也是一知半解，反正能用就行，我也不知道怎么更快，以后慢慢了解。&lt;/p>
&lt;ul>
&lt;li>zinit 配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># # ------------&amp;gt;&amp;gt;&amp;gt; zinit &amp;lt;&amp;lt;&amp;lt;-------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### Added by Zinit&amp;#39;s installer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> ! -f &lt;span class="nv">$HOME&lt;/span>/.local/share/zinit/zinit.git/zinit.zsh &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print -P &lt;span class="s2">&amp;#34;%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">command&lt;/span> mkdir -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOME&lt;/span>&lt;span class="s2">/.local/share/zinit&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">command&lt;/span> chmod g-rwX &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOME&lt;/span>&lt;span class="s2">/.local/share/zinit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">command&lt;/span> git clone https://github.com/zdharma-continuum/zinit &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOME&lt;/span>&lt;span class="s2">/.local/share/zinit/zinit.git&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> print -P &lt;span class="s2">&amp;#34;%F{33} %F{34}Installation successful.%f%b&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> print -P &lt;span class="s2">&amp;#34;%F{160} The clone has failed.%f%b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOME&lt;/span>&lt;span class="s2">/.local/share/zinit/zinit.git/zinit.zsh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">autoload -Uz _zinit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">((&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">+_comps&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">))&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> _comps&lt;span class="o">[&lt;/span>zinit&lt;span class="o">]=&lt;/span>_zinit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Load a few important annexes, without Turbo (this is currently required for annexes)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit light-mode &lt;span class="k">for&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> zdharma-continuum/zinit-annex-as-monitor &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> zdharma-continuum/zinit-annex-bin-gem-node &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> zdharma-continuum/zinit-annex-patch-dl &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> zdharma-continuum/zinit-annex-rust
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># syntax highlight&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit ice lucid &lt;span class="nv">wait&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit light zsh-users/zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># auto-suggestion &amp;amp;&amp;amp; completion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit ice lucid &lt;span class="nv">wait&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="nv">atload&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;_zsh_autosuggest_start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit light zsh-users/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit ice lucid blockf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit light zsh-users/zsh-completions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit ice lucid &lt;span class="nv">wait&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit light Aloxaf/fzf-tab
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># OMZ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit ice lucid &lt;span class="nv">wait&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::plugins/git/git.plugin.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add `sudo` with &amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::plugins/sudo/sudo.plugin.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># theme&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::lib/theme-and-appearance.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::lib/git.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::lib/async_prompt.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::plugins/svn/svn.plugin.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zinit snippet OMZ::themes/ys.zsh-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### End of Zinit&amp;#39;s installer chunk&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>zplug 配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ------------&amp;gt;&amp;gt;&amp;gt; zplug &amp;lt;&amp;lt;&amp;lt;-------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> ! -d ~/.zplug &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git clone https://github.com/b4b4r07/zplug.git ~/.zplug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">source&lt;/span> ~/.zplug/zplug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zplug update --self
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zplug/init.zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;plugins/svn&amp;#34;&lt;/span>, from:oh-my-zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;themes/ys&amp;#34;&lt;/span>, from:oh-my-zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;lib/history&amp;#34;&lt;/span>, from:oh-my-zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;zsh-users/zsh-completions&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;zsh-users/zsh-autosuggestions&amp;#34;&lt;/span>, as:plugin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;zsh-users/zsh-syntax-highlighting&amp;#34;&lt;/span>, as:plugin, defer:2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug &lt;span class="s2">&amp;#34;zsh-users/zsh-history-substring-search&amp;#34;&lt;/span>, as:plugin, defer:3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Install plugins if there are plugins that have not been installed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> ! zplug check --verbose&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;Install zplug plugins? [y/N]: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">read&lt;/span> -q&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo&lt;span class="p">;&lt;/span> zplug install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zplug load
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="对比">对比
&lt;/h2>&lt;img src="image.png" style="zoom:80%;align:center;">
&lt;p>对比发现，zinit虽然加载了更多插件，但启动速度稳定在0.2秒左右，而zplug则在0.5秒左右。&lt;/p></description></item><item><title>Nushell | 跨平台且现代化的shell</title><link>https://yaragos.top/p/nushell-a-new-shell/</link><pubDate>Sun, 24 Dec 2023 15:42:04 +0800</pubDate><guid>https://yaragos.top/p/nushell-a-new-shell/</guid><description>&lt;img src="https://yaragos.top/p/nushell-a-new-shell/cover.jpg" alt="Featured image of post Nushell | 跨平台且现代化的shell" />&lt;blockquote>
&lt;p>像这样现代的shell,以前听说过fish,也简单尝试过，一种交互式的shell,通过打开浏览器进行配置，方便快捷。&lt;br>
今天看到这样一种新颖的shell,就体验了一下，它Github还挺多start的，Rust语言编写，跨平台，文档有中文，太友好了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="overview">Overview
&lt;/h2>
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/css/swiper.min.css">
&lt;div class="swiper-container">
&lt;div class="swiper-wrapper">
&lt;div class="swiper-slide">
&lt;img src="image.png" alt="">
&lt;/div>
&lt;div class="swiper-slide">
&lt;img src="image1.png" alt="">
&lt;/div>
&lt;div class="swiper-slide">
&lt;img src="image2.png" alt="">
&lt;/div>
&lt;div class="swiper-slide">
&lt;img src="image3.png" alt="">
&lt;/div>
&lt;/div>
&lt;div class="swiper-pagination">&lt;/div>
&lt;/div>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/js/swiper.min.js">&lt;/script>
&lt;script>
var swiper = new Swiper('.swiper-container', {
pagination: '.swiper-pagination',
paginationClickable: true,
autoHeight: true,
keyboardControl : true,
mousewheelControl : true,
autoplay : 5000,
lazyLoading : true,
lazyLoadingInPrevNext : true,
loop : true,
});
&lt;/script>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.nushell.sh/zh-CN/" target="_blank" rel="noopener"
>官网：https://www.nushell.sh/zh-CN/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/nushell/nushell" target="_blank" rel="noopener"
>Github：https://github.com/nushell/nushell&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nushell 有许多不同与bash这类传统shell的特性（看官网感觉挺深奥的）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开箱即用，自带了历史命令，自动补全，语法高亮，清晰的错误提示，彩色输出等功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nushell 通过管道传递结构化数据，并且通过内置命令很方便地进行排序和过滤数据，而不需要像传统shell那样用awk,sed,grep等命令来解析字符串，让使用者专注于解决问题本身而不需要花过多心思去处理数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内置命令挺多，像ls,cd等基础命令它都内置了，ls输出格式挺美观。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>我只是通过brew安装尝试了一下，我之前一直是使用zsh的，配置的挺完美了，而且Nu的配置语法和zsh有些不同，配置文件也不在&lt;code>~&lt;/code>目录而是在&lt;code>~/.config/nu&lt;/code>，不适合作为我在 Linux 系统上的常用shell，我觉得可以配合 &lt;a class="link" href="https://starship.rs/" target="_blank" rel="noopener"
>Starship&lt;/a> 在Windows上使用。它目前开发还是挺活跃的，期待以后的发展。&lt;/p></description></item><item><title>优雅地搜索命令历史记录</title><link>https://yaragos.top/p/search-command-history-elegantly/</link><pubDate>Fri, 24 Nov 2023 13:32:48 +0800</pubDate><guid>https://yaragos.top/p/search-command-history-elegantly/</guid><description>&lt;img src="https://yaragos.top/p/search-command-history-elegantly/cover.jpg" alt="Featured image of post 优雅地搜索命令历史记录" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>&lt;code>history&lt;/code>命令可以显示所有的命令历史记录，但难以查找命令。&lt;br>
聪明的你当然会想到配合&lt;code>grep&lt;/code>命令进行搜索，可行但效率太低，这样检索不够灵活，要查找记忆模糊的命令还需要正则匹配。&lt;/p>
&lt;h2 id="模糊搜索命令历史记录">模糊搜索命令历史记录
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/junegunn/fzf" target="_blank" rel="noopener"
>fzf&lt;/a>是一个交互式命令行模糊搜索工具，可以模糊搜索内容、模糊补全文件路径等，功能强大，更多功能请参考官方文档。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过自带的包管理器或&lt;code>homebrew&lt;/code>等第三方包管理器安装即可，参考官方文档安装。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按下&lt;code>ctrl+r&lt;/code>组合键，进入命令历史记录搜索模式，输入搜索内容，fzf会自动搜索匹配的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+j&lt;/code>或&lt;code>ctrl+n&lt;/code>向下移动，&lt;code>ctrl+k&lt;/code>或&lt;code>ctrl+p&lt;/code>向上移动，也可以使用方向键或鼠标滚轮，按下回车选中命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按下&lt;code>ctrl+g&lt;/code>组合键或&lt;code>Esc&lt;/code>键，退出搜索模式，返回命令行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你忘了快捷键，可以使用&lt;code>history | fzf&lt;/code>命令，通过管道让&lt;code>fzf&lt;/code>模糊搜索&lt;code>history&lt;/code>的输出内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用fzf进行文件路径补全">使用fzf进行文件路径补全
&lt;/h2>&lt;p>既然提到&lt;code>fzf&lt;/code>，那么顺便介绍一下如何使用它进行文件路径补全。&lt;br>
当然，默认按&lt;code>tab&lt;/code>键也可以进行补全，但&lt;code>fzf&lt;/code>更好用。&lt;/p>
&lt;ul>
&lt;li>如果想补全指定目录下的某个文件名，在指定目录下输入两个星号，然后按下&lt;code>tab&lt;/code>键，就会打开&lt;code>fzf&lt;/code>的交互式界面进行匹配。&lt;/li>
&lt;li>例：比如想补全&lt;code>~/.config/&lt;/code>下的某个较长的文件名，&lt;code>ls ~/.config/**&lt;/code> ，然后按下&lt;code>tab&lt;/code>键&lt;/li>
&lt;li>如果想输入某个用户目录下的路径，可以使用快捷键&lt;code>ctrl+t&lt;/code>打开交互式界面，选中后回车上屏。&lt;/li>
&lt;/ul></description></item><item><title>为啥我选择 Linux 作为日常工作环境？</title><link>https://yaragos.top/p/why-i-choose-linux-as-my-daily-work-environment/</link><pubDate>Sun, 19 Nov 2023 18:59:24 +0800</pubDate><guid>https://yaragos.top/p/why-i-choose-linux-as-my-daily-work-environment/</guid><description>&lt;img src="https://yaragos.top/p/why-i-choose-linux-as-my-daily-work-environment/cover.jpg" alt="Featured image of post 为啥我选择 Linux 作为日常工作环境？" />&lt;blockquote>
&lt;p>主要尝试了deb系比如debian, deepin, zorin, mint等以及arch系比如Manjaro, EndeavourOS等，桌面环境只尝试了Gnome和KDE,没尝试过各种WM。目前一直在用mint,它的Cinnamon桌面挺好用。&lt;/p>
&lt;/blockquote>
&lt;h2 id="why">why
&lt;/h2>&lt;ol>
&lt;li>轻量，开机后占用内存很少，速度快，当初win11有时候拖动窗口都会卡顿，打开个IDE加载七八秒，实在用不下去。&lt;/li>
&lt;li>环境配置方便，安装和卸载软件也很方便，不像win&amp;hellip;&lt;/li>
&lt;li>我不打游戏。&lt;/li>
&lt;/ol>
&lt;h2 id="软件安装">软件安装
&lt;/h2>&lt;p>像 git, vim 这些用apt安装就行（推荐&lt;code>nala&lt;/code>，一个更好看的apt）；&lt;br>
像WPS, vscode 和 QQ, 微信等可以通过&lt;a class="link" href="https://gitee.com/spark-store-project/spark-store" target="_blank" rel="noopener"
>星火应用商店&lt;/a>安装；&lt;br>
第三方包管理工具推荐&lt;a class="link" href="https://brew.sh/" target="_blank" rel="noopener"
>homebrew&lt;/a>，挺多软件都可以用它安装，像docker, mysql, 还有各种开发环境；&lt;br>
部分软件就下载二进制文件安装，或者自己编译。&lt;/p>
&lt;h2 id="开发环境搭建和管理">开发环境搭建和管理
&lt;/h2>&lt;p>主流语言环境直接brew安装就行，apt也行，就是版本旧了点。&lt;br>
开发环境的版本管理：node版本管理当然是大名鼎鼎的nvm,不过我目前用的是fnm,更轻量更快；golang版本管理就gvm;java版本管理就sdkman(sdkman不止管理jdk还有maven等)。&lt;/p>
&lt;p>其实我就node切换管理频繁些，go就一个版本就够用了，像jdk,maven,maven,tomcat我就把常用的版本放在&lt;code>~/env&lt;/code>目录下，在IDE中选择对应环境就行。&lt;/p>
&lt;h2 id="改键">改键
&lt;/h2>&lt;p>为什么我要单独开个小标题讲这个呢？&lt;/p>
&lt;p>首先对于主流配列我习惯交换左&lt;code>Ctrl&lt;/code>和&lt;code>Caps Lock&lt;/code>键，并且由于常用vim，我会设置&lt;code>Caps Lock&lt;/code>键单独按是&lt;code>Esc&lt;/code>组合按是&lt;code>Ctrl&lt;/code>；且对于60%配列键盘要交换&lt;kbd>`&lt;/kbd>和&lt;kbd>Esc&lt;/kbd>而80%配列键盘不交换。因为这些改键需求，我理想中的改键软件是能根据不同键盘设备使用不同的键位映射且能够实现较为复杂的映射。&lt;/p>
&lt;p>如此苛刻的条件，我只发现&lt;a class="link" href="https://github.com/rvaiya/keyd" target="_blank" rel="noopener"
>keyd&lt;/a>能满足我的要求，它是内核级别的改键，在x11和wayland下都能工作，通过编辑配置文件的配置方式便于我迁移配置。但它只支持Linux，唉，Mac这键位也是难受。&lt;/p>
&lt;p>键盘这块，我的想法是以后整把支持via的70%配列键盘，弥补改键软件这方面的空缺，让不同平台的体验尽量一致。&lt;/p></description></item></channel></rss>